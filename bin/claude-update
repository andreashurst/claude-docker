#!/bin/bash
#
# Claude Docker Update Checker
# Checks for updates and optionally installs them
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

GITHUB_REPO="andreashurst/claude-docker"
CURRENT_VERSION="3.2.0"

# Check for updates
check_updates() {
    echo "🔍 Checking for updates..."
    echo ""
    
    # Get latest release from GitHub
    local latest_version=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest" | \
        grep '"tag_name":' | \
        sed -E 's/.*"v([^"]+)".*/\1/' || echo "")
    
    if [ -z "$latest_version" ]; then
        echo -e "${YELLOW}⚠️  Could not check for updates${NC}"
        echo "Check manually at: https://github.com/$GITHUB_REPO/releases"
        return 1
    fi
    
    echo "Current version: $CURRENT_VERSION"
    echo "Latest version:  $latest_version"
    echo ""
    
    # Compare versions
    if [ "$CURRENT_VERSION" = "$latest_version" ]; then
        echo -e "${GREEN}✅ You're running the latest version!${NC}"
        return 0
    else
        echo -e "${YELLOW}🆕 Update available: v$latest_version${NC}"
        echo ""
        
        # Show changelog
        echo "What's new:"
        curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest" | \
            grep '"body":' | \
            sed -E 's/.*"body": "(.*)".*/\1/' | \
            sed 's/\\n/\n/g' | \
            head -10
        echo ""
        
        return 2
    fi
}

# Update Claude Docker
update_claude() {
    echo "════════════════════════════════════════════════════════"
    echo "  🚀 Updating Claude Docker"
    echo "════════════════════════════════════════════════════════"
    echo ""
    
    # Backup current installation
    echo "1. Backing up current installation..."
    if [ -f /usr/local/bin/claude-dev ]; then
        sudo cp /usr/local/bin/claude-dev /usr/local/bin/claude-dev.bak
        echo -e "  ${GREEN}✓${NC} Backup created"
    fi
    echo ""
    
    # Download and run installer
    echo "2. Downloading latest version..."
    curl -sSL "https://raw.githubusercontent.com/$GITHUB_REPO/main/install.sh" -o /tmp/claude-docker-install.sh
    echo -e "  ${GREEN}✓${NC} Downloaded"
    echo ""
    
    echo "3. Installing..."
    bash /tmp/claude-docker-install.sh
    echo ""
    
    echo "4. Pulling latest Docker images..."
    docker pull andreashurst/claude-docker:latest-dev
    docker pull andreashurst/claude-docker:latest-flow
    echo ""
    
    echo -e "${GREEN}✅ Update complete!${NC}"
    echo ""
    echo "Restart any running containers:"
    echo "  claude-dev --stop && claude-dev"
    echo "  claude-flow --stop && claude-flow"
    echo ""
    
    # Cleanup
    rm -f /tmp/claude-docker-install.sh
}

# Show usage
show_usage() {
    echo "Usage: claude-update [options]"
    echo ""
    echo "Options:"
    echo "  --check      Check for updates only"
    echo "  --install    Install updates if available"
    echo "  --force      Force reinstall current version"
    echo "  -h, --help   Show this help"
    echo ""
}

# Main
case "${1:-}" in
    --check)
        check_updates
        ;;
    --install)
        check_updates
        if [ $? -eq 2 ]; then
            echo ""
            read -p "Install update? (y/n) " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                update_claude
            else
                echo "Update cancelled"
            fi
        fi
        ;;
    --force)
        echo -e "${YELLOW}⚠️  Force reinstalling current version${NC}"
        echo ""
        update_claude
        ;;
    -h|--help)
        show_usage
        ;;
    "")
        # Default: check and prompt
        check_updates
        status=$?
        
        if [ $status -eq 2 ]; then
            echo ""
            read -p "Install update now? (y/n) " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                update_claude
            else
                echo ""
                echo "Install later with: claude-update --install"
            fi
        fi
        ;;
    *)
        echo "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac
