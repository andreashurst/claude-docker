#!/bin/bash
# Standalone claude-flow script using Docker Hub image

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo "Error: Docker is not running. Please start Docker and try again."
    exit 1
fi

# Get current directory and create project-specific naming
CURRENT_DIR=$(pwd)
PROJECT_BASE=$(basename "$CURRENT_DIR")
COMPOSE_PROJECT_NAME="${PROJECT_BASE}-claude-flow"

# Create project-specific MCP configuration
MCP_CONFIG_DIR="/tmp/claude-config-${PROJECT_BASE}"
mkdir -p "$MCP_CONFIG_DIR"
cat > "$MCP_CONFIG_DIR/claude_desktop_config.json" << 'EOF'
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-filesystem", "/var/www/html"]
    },
    "playwright": {
      "command": "npx", 
      "args": ["@playwright/mcp"],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "/home/claude/.cache/ms-playwright"
      }
    },
    "git": {
      "command": "python3",
      "args": ["-m", "mcp_server_git", "--repository", "/var/www/html"]
    }
  },
  "environmentInfo": {
    "internalWebServer": {
      "status": "Will be started on container launch",
      "url": "http://localhost:80",
      "hostAccess": "http://localhost:8080",
      "description": "Internal Python HTTP server for Playwright testing",
      "note": "Server directory will be auto-detected or prompted during startup"
    },
    "playwrightUsage": {
      "description": "Use Playwright with the internal web server",
      "testCommand": "await page.goto('http://localhost:80')",
      "codegen": "playwright codegen http://localhost:80"
    }
  }
}
EOF

# Create project-specific docker-compose file
COMPOSE_FILE="/tmp/claude-flow-${PROJECT_BASE}-compose.yml"
cat > "$COMPOSE_FILE" << EOF
services:
  claude-flow:
    image: andreashurst/claude-docker:latest-flow
    working_dir: /var/www/html
    
    ports:
      - "8080:80"
    
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    volumes:
      - ${CURRENT_DIR}:/var/www/html:cached
      - ${MCP_CONFIG_DIR}/claude_desktop_config.json:/home/claude/.config/claude/claude_desktop_config.json:ro
    
    environment:
      - NODE_ENV=development
      - NPM_CONFIG_CACHE=/tmp/npm-cache
      - CLAUDE_CONFIG_PATH=/home/claude/.config/claude
      - CLAUDE_PROJECT_PATH=${CURRENT_DIR}
      - PATH="/home/claude/.deno/bin:\$PATH"
      - DENO_INSTALL="/home/claude/.deno"
      - PLAYWRIGHT_BROWSERS_PATH=/home/claude/.cache/ms-playwright
      - PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0
      - PROJECT_PATH=${CURRENT_DIR}
    
    stdin_open: true
    tty: true
    
    security_opt:
      - no-new-privileges:true
    
    restart: "no"
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

EOF

# Check if container is already running, if not start it
if ! docker compose -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT_NAME" ps --services --filter "status=running" | grep -q claude-flow; then
    echo "Starting ${COMPOSE_PROJECT_NAME}..."
    docker compose -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT_NAME" up -d
else
    echo "Container ${COMPOSE_PROJECT_NAME} already running..."
fi

# Attach to container interactively
docker compose -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT_NAME" exec claude-flow /usr/local/bin/entrypoint.sh

# Stop container when exiting (but don't remove it)
docker compose -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT_NAME" stop
rm -f "$COMPOSE_FILE"
rm -rf "$MCP_CONFIG_DIR"