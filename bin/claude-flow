#!/bin/bash

# Claude Flow Universal Installer v3.2.0
# Advanced environment with Playwright and testing tools

set -e

VERSION="3.2.0"
CONTAINER_NAME="claude-flow"

# Load shared library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/claude-docker.lib.sh"

CURRENT_DIR=$(pwd)

# Create compose files for Flow
create_files() {
    # Create minimal docker-compose.yml if needed
    claude_docker_create_base_compose

    # Ask about override file using library function
    claude_docker_ask_replace_override || return 0

    # Create playwright.config.js ONLY if it doesn't exist
    if [ ! -f "playwright.config.js" ] && [ ! -f "playwright.config.ts" ]; then
        echo "📝 Creating default playwright.config.js (customize as needed)..."
        cat > "playwright.config.js" << 'PWCONFIG'
// @ts-check
const { defineConfig, devices } = require('@playwright/test');

/**
 * Playwright configuration for Claude Flow
 * @see https://playwright.dev/docs/test-configuration
 */
module.exports = defineConfig({
  testDir: './playwright-tests',
  outputDir: './playwright-results',

  // Maximum time one test can run
  timeout: 30 * 1000,

  // Run tests in parallel
  fullyParallel: true,

  // Fail the build on CI if you accidentally left test.only
  forbidOnly: !!process.env.CI,

  // Retry on CI only
  retries: process.env.CI ? 2 : 0,

  // Parallel workers on CI, single on local
  workers: process.env.CI ? 1 : undefined,

  // Reporter configuration
  reporter: [
    ['html', { outputFolder: 'playwright-report', open: 'never' }],
    ['list'],
    ['json', { outputFile: 'playwright-results/results.json' }]
  ],

  use: {
    // Base URL for all tests
    baseURL: process.env.BASE_URL || 'http://localhost',

    // Collect trace when retrying the failed test
    trace: 'on-first-retry',

    // Screenshot on failure
    screenshot: {
      mode: 'only-on-failure',
      fullPage: true
    },

    // Video on failure
    video: 'retain-on-failure',

    // Artifacts folder
    artifactsPath: './playwright-results/artifacts'
  },

  // Configure projects for major browsers
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    // Mobile testing
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
  ],

  // Local dev server (if needed)
  webServer: process.env.NO_WEBSERVER ? undefined : {
    command: 'echo "Using localhost from host machine"',
    url: 'http://localhost',
    reuseExistingServer: true,
  },
});
PWCONFIG
        echo "✅ Created playwright.config.js - you can customize it as needed"
    else
        echo "✅ Using existing playwright.config.js/ts"
    fi

    # Setup test directories with playwright prefix
    echo "📁 Setting up Playwright directories..."
    mkdir -p playwright-tests
    mkdir -p playwright-results
    mkdir -p playwright-report

    # Simple gitignore - just playwright*
    if [ -f ".gitignore" ]; then
        grep -q "^playwright" .gitignore || echo -e "\n# Playwright artifacts\nplaywright*" >> .gitignore
    else
        cat > .gitignore << 'GITIGNORE'
# Playwright artifacts
playwright*

# Docker
docker-compose.override.yml

# Claude
.claude.docker.json
GITIGNORE
    fi

    # MCP configuration would go in container, not in project
    # Removed MCP config creation from project directory

    # Create custom entrypoint using library
    local ENTRYPOINT_FILE="/tmp/claude-flow-entrypoint-$$.sh"
    claude_docker_create_entrypoint "flow" "$ENTRYPOINT_FILE"

    # Create docker-compose.override.yml using library
    claude_docker_create_override "flow" "$ENTRYPOINT_FILE" "$CURRENT_DIR"

    # Create README for Flow
    cat > "README-Claude-Flow.md" << EOF
# Claude Flow Environment

## Features:
- 🎭 Playwright for browser automation
- 🔬 Hive-Mine for data analysis
- 🧪 Advanced testing capabilities
- 🚀 All Claude Dev features included

## Quick Start:
\`\`\`bash
playwright test          # Run Playwright tests
playwright test --ui    # Open test UI
playwright test --debug # Debug mode
playwright codegen      # Generate test code
\`\`\`

## Testing localhost:
- \`curl localhost\` - Works automatically
- \`ctest\` - Quick test

## First time setup:
1. \`claude auth login\` (if needed)
2. \`playwright install\` to setup browsers
EOF

    claude_docker_update_gitignore
}

# Main function
main() {
    echo "🎭 Claude Flow v$VERSION"
    echo "========================"
    echo "Advanced testing environment with Playwright"
    echo ""

    claude_docker_check
    
    # If container is already running, just connect
    if claude_docker_is_running "$CONTAINER_NAME"; then
        echo "✅ Container already running!"
        claude_docker_just_connect "$CONTAINER_NAME"
    else
        create_files
        claude_docker_start_and_connect "$CONTAINER_NAME"
    fi
}

# Handle arguments
case "${1:-}" in
    -v|--version) echo "v$VERSION"; exit 0 ;;
    --stop) docker compose stop $CONTAINER_NAME; exit 0 ;;
    --clean) docker compose down; rm -f docker-compose.override.yml playwright.config.js; exit 0 ;;
    --root)
        echo "🔐 Starting as root (backdoor mode)..."
        claude_docker_check
        create_files
        docker compose down 2>/dev/null || true
        docker compose up -d
        sleep 3
        if docker compose ps "$CONTAINER_NAME" 2>/dev/null | grep -q "Up"; then
            echo "✅ Container started - connecting as root"
            docker compose exec "$CONTAINER_NAME" bash
        else
            echo "Failed to start. Check logs:"
            docker compose logs "$CONTAINER_NAME"
            exit 1
        fi
        ;;
    -h|--help)
        echo "Usage: $0 [--version|--stop|--clean|--root|--help]"
        echo "  --root    Start with root access (backdoor)"
        exit 0
        ;;
    "") main ;;
    *) echo "Unknown option: $1"; exit 1 ;;
esac