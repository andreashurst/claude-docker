#!/bin/bash
# Playwright wrapper with Docker/DDEV URL rewriting
# Automatically handles Docker networking without config changes
# Part of claude-docker: https://github.com/andreashurst/claude-docker

# Find Node.js - check multiple possible locations
if [ -x "/usr/local/bin/node" ]; then
    NODE_BIN="/usr/local/bin/node"
elif [ -x "/usr/bin/node" ]; then
    NODE_BIN="/usr/bin/node"
elif command -v node >/dev/null 2>&1; then
    NODE_BIN=$(command -v node)
else
    echo "Error: Node.js not found" >&2
    exit 1
fi

# Playwright CLI location
PLAYWRIGHT_CLI="/usr/local/lib/node_modules/playwright/cli.js"

if [ ! -f "$PLAYWRIGHT_CLI" ]; then
    echo "Error: Playwright CLI not found at $PLAYWRIGHT_CLI" >&2
    exit 1
fi

# Detect environment
detect_environment() {
    if [ -f /.ddev/config.yaml ]; then
        echo "ddev"
    elif [ -f /.dockerenv ] || [ -n "$DOCKER_CONTAINER" ]; then
        echo "docker"
    elif [ -n "$KUBERNETES_SERVICE_HOST" ]; then
        echo "kubernetes"
    else
        echo "local"
    fi
}

# Get host replacement based on environment
get_host_replacement() {
    local env=$1
    
    case "$env" in
        ddev)
            if [ -f /var/www/html/.ddev/config.yaml ]; then
                local sitename=$(grep '^name:' /var/www/html/.ddev/config.yaml | sed 's/name: *//' | tr -d '"')
                local tld=$(grep '^project_tld:' /var/www/html/.ddev/config.yaml | sed 's/project_tld: *//' | tr -d '"')
                [ -z "$tld" ] && tld="ddev.site"
                echo "${sitename}.${tld}"
            else
                echo "localhost"
            fi
            ;;
        docker)
            echo "host.docker.internal"
            ;;
        kubernetes)
            echo "host.k8s.internal"
            ;;
        *)
            echo "localhost"
            ;;
    esac
}

# Rewrite URL
rewrite_url() {
    local url="$1"
    local env="$2"
    local host_replacement="$3"
    
    # Skip if not a localhost-like URL
    if [[ ! "$url" =~ (localhost|127\.0\.0\.1|0\.0\.0\.0) ]]; then
        echo "$url"
        return
    fi
    
    # Replace localhost variants
    local new_url="$url"
    new_url="${new_url//localhost:/$host_replacement:}"
    new_url="${new_url//127.0.0.1:/$host_replacement:}"
    new_url="${new_url//0.0.0.0:/$host_replacement:}"
    new_url="${new_url//localhost\//$host_replacement/}"
    new_url="${new_url//127.0.0.1\//$host_replacement/}"
    
    # Handle URLs without explicit port
    if [[ "$new_url" == "http://localhost" ]] || [[ "$new_url" == "http://127.0.0.1" ]]; then
        new_url="http://$host_replacement"
    fi
    if [[ "$new_url" == "https://localhost" ]] || [[ "$new_url" == "https://127.0.0.1" ]]; then
        new_url="https://$host_replacement"
    fi
    
    echo "$new_url"
}

# Main execution
main() {
    local env=$(detect_environment)
    local host_replacement=$(get_host_replacement "$env")
    
    # Process arguments
    local args=()
    local next_is_url=false
    
    for arg in "$@"; do
        local modified_arg="$arg"
        
        # Check if previous arg indicated next would be a URL
        if [ "$next_is_url" = "true" ]; then
            modified_arg=$(rewrite_url "$arg" "$env" "$host_replacement")
            next_is_url=false
        # Check for URL-related flags
        elif [[ "$arg" == "--base-url" ]] || [[ "$arg" == "-u" ]] || [[ "$arg" == "--url" ]]; then
            next_is_url=true
        # Check for inline URL format
        elif [[ "$arg" =~ ^(--base-url|--url|-u)=(.+)$ ]]; then
            local flag="${BASH_REMATCH[1]}"
            local url="${BASH_REMATCH[2]}"
            local new_url=$(rewrite_url "$url" "$env" "$host_replacement")
            modified_arg="${flag}=${new_url}"
        # Check if this looks like a URL
        elif [[ "$arg" =~ ^https?:// ]]; then
            modified_arg=$(rewrite_url "$arg" "$env" "$host_replacement")
        fi
        
        args+=("$modified_arg")
    done
    
    # Special handling for common playwright commands
    local command="${1:-}"
    
    # Ensure proper browser path for Docker
    if [ "$command" = "test" ] && [ "$env" = "docker" ]; then
        export PLAYWRIGHT_BROWSERS_PATH="${PLAYWRIGHT_BROWSERS_PATH:-/home/claude/.cache/ms-playwright}"
    fi
    
    # Execute playwright with Node.js
    exec "$NODE_BIN" "$PLAYWRIGHT_CLI" "${args[@]}"
}

# Run main function
main "$@"