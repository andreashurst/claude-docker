#!/bin/bash

# Claude Docker Universal Installer v3.2.0 - KISS Edition  
# Last updated: 2025-01-13

set -e

VERSION="3.2.0"
CONTAINER_NAME="claude-dev"

# Load shared library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/claude-docker.lib.sh"

CURRENT_DIR=$(pwd)

# Create compose files
create_files() {
    # Create base docker-compose.yml if needed
    echo "DEBUG: Creating base compose..."
    claude_docker_create_base_compose
    
    # Ask about override
    echo "DEBUG: Checking override..."
    claude_docker_ask_replace_override || return 0
    echo "DEBUG: Creating override file..."

    # Create custom entrypoint
    cat > "/tmp/claude-entrypoint-$$.sh" << EOF
#!/bin/bash

# Claude Dev Container Entrypoint - KISS Edition
ROOT="/var/www/html"

# Localhost mapping
$(claude_docker_create_localhost_mapping)

# Environment setup  
$(claude_docker_create_base_environment)

# PHP fix for Alpine
[ -f /usr/bin/php83 ] && ln -sf /usr/bin/php83 /usr/bin/php 2>/dev/null || true

# Setup claude environment
mkdir -p /home/claude/.claude/{docs,scripts,config}
chown -R claude:claude /home/claude/.claude

# Create .bashrc for claude user
cat > /home/claude/.bashrc << 'EOF2'
# Ensure PATH includes npm global bin
export PATH="/usr/local/bin:\$PATH"
# Claude Dev Environment
$(claude_docker_create_common_aliases)
$(claude_docker_create_command_blockers)
$(claude_docker_create_claude_wrapper)

# Project detection
cd /var/www/html 2>/dev/null || true
PS1='\\[\\033[01;32m\\]claude@dev\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '

if [ -t 1 ]; then
    PROJECT_TYPE="\${PROJECT_TYPE:-unknown}"
    echo ""
    echo "Claude Dev Container Ready"
    echo "  Working Directory: \$(pwd)"
    echo "  Project Type: \$PROJECT_TYPE"
    echo "  Test localhost: ctest"
    echo ""
fi
EOF2

chown -R claude:claude /home/claude
cd /var/www/html
exec su claude -c "exec bash"
EOF

    chmod +x /tmp/claude-entrypoint-$$.sh

    # Check if there's an existing webserver in docker-compose.yml
    local webserver_config=""
    if [ -f "docker-compose.yml" ]; then
        # Look for common webserver service names
        for service in webserver web nginx apache httpd app server; do
            if grep -q "^  $service:" docker-compose.yml 2>/dev/null; then
                echo "📝 Found existing service '$service' - adding to claude-network"
                webserver_config="
  $service:
    networks:
      - claude-network"
                break
            fi
        done
    fi
    
    # Create docker-compose.override.yml
    cat > "docker-compose.override.yml" << EOF
services:
  $CONTAINER_NAME:
    image: andreashurst/claude-docker:latest-dev
    working_dir: /var/www/html
    user: "0:0"
    
    volumes:
      - .:/var/www/html
      - /tmp/claude-entrypoint-$$.sh:/usr/local/bin/custom-entrypoint.sh
    
    environment:
      - NODE_ENV=development
      - PROJECT_PATH=$CURRENT_DIR
      - PROJECT_TYPE=$(claude_docker_detect_project)
    
    stdin_open: true
    tty: true
    restart: "no"
    
    networks:
      - claude-network
    
    # MacBook Pro optimized resources
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    entrypoint: ["/usr/local/bin/custom-entrypoint.sh"]
$webserver_config

networks:
  claude-network:
    driver: bridge
EOF

    echo "Created claude-dev configuration"
    
    # Create README
    cat > "README-Claude.md" << EOF
# Claude Dev Environment

## Usage:
- \`curl localhost\` - Access webserver
- \`ctest\` - Quick test
- Credentials saved to ~/.claude.docker.json

## First time:
1. \`claude auth login\` (if needed)
2. Credentials automatically saved
EOF

    claude_docker_update_gitignore
}

# Main function
main() {
    echo "Claude Docker Installer v$VERSION"
    echo "================================="
    
    echo "DEBUG: Checking Docker..."
    claude_docker_check
    echo "DEBUG: Docker check passed"
    
    echo "DEBUG: Creating files..."
    create_files
    echo "DEBUG: Files created"
    
    echo "DEBUG: Starting container..."
    claude_docker_start_and_connect "$CONTAINER_NAME"
}

# Handle arguments
case "${1:-}" in
    -v|--version) echo "v$VERSION"; exit 0 ;;
    --stop) docker compose stop $CONTAINER_NAME; exit 0 ;;
    --clean) docker compose down; rm -f docker-compose.override.yml README-Claude.md; exit 0 ;;
    -h|--help) 
        echo "Usage: $0 [--version|--stop|--clean|--help]"
        exit 0 
        ;;
    "") main ;;
    *) echo "Unknown option: $1"; exit 1 ;;
esac