#!/bin/bash

ROOT="/var/www/html"

# Setup /home/claude directories (since it's volume-mounted)
mkdir -p /home/claude/.claude/plugins /home/claude/.claude/databases /home/claude/.claude/context
mkdir -p /home/claude/.npm-global/bin

# Copy pre-built environment facts database if it doesn't exist
if [ ! -f /home/claude/.claude/databases/main.db ] && [ -f /opt/mcp-cache/databases/environment.db ]; then
    cp /opt/mcp-cache/databases/environment.db /home/claude/.claude/databases/main.db
    echo "Environment facts database initialized from CLAUDE.md"
fi

chown -R claude:claude /home/claude

# Setup MCP configuration
if [ ! -f /home/claude/.claude.json ]; then
    cp /opt/mcp-cache/claude-template.json /home/claude/.claude.json

    # Update the currentProject path if needed
    sed -i "s|\"currentProject\": \"/var/www/html\"|\"currentProject\": \"$ROOT\"|g" /home/claude/.claude.json
    sed -i "s|\"/var/www/html\": {|\"$ROOT\": {|g" /home/claude/.claude.json

fi

# Initialize project settings if not exists
mkdir -p /var/www/html/.claude
if [ ! -f /var/www/html/.claude/settings.local.json ]; then
    # Use template for new projects
    if [ -f /opt/mcp-cache/claude-project-settings-template.json ]; then
        cp /opt/mcp-cache/claude-project-settings-template.json /var/www/html/.claude/settings.local.json
        echo "Claude Code settings initialized from template"
    fi
elif [ -f /home/claude/.claude.json ]; then
    # Update existing settings (preserve user changes)
    cp /home/claude/.claude.json /var/www/html/.claude/settings.local.json
    echo "Settings updated from /home/claude/.claude.json"
fi

# Ensure MCP config is available
if [ -f /opt/mcp-cache/mcp.json ]; then
    ln -sf /opt/mcp-cache/mcp.json /home/claude/.claude/plugins/mcp.json
fi

# Create symlinks to MCP assets from system location
if [ -d /opt/mcp-assets ]; then
    # Symlink MCP assets to /home/claude/mcp
    mkdir -p /home/claude/mcp
    ln -sfn /opt/mcp-assets/servers /home/claude/mcp/servers
    ln -sfn /opt/mcp-assets/context /home/claude/mcp/context
    ln -sfn /opt/mcp-cache/mcp.json /home/claude/mcp/config.json
    ln -sfn /opt/mcp-assets/init.sh /home/claude/mcp/init.sh

    # Also create context symlinks in .claude/context for compatibility
    mkdir -p /home/claude/.claude/context
    find /opt/mcp-assets/context -name "*.json" -type f | while read context_file; do
        filename=$(basename "$context_file")
        ln -sf "$context_file" "/home/claude/.claude/context/$filename"
    done

    # Ensure servers are executable
    chmod +x /opt/mcp-assets/servers/*.js 2>/dev/null || true
    chown -R claude:claude /home/claude/mcp
fi

# Ensure proper ownership and permissions
chown -R claude:claude /home/claude/.claude
chmod 755 /home/claude/.claude
chmod 644 /home/claude/.claude.json 2>/dev/null || true
if [ -d /home/claude/.claude/plugins ]; then
    chmod 755 /home/claude/.claude/plugins
    chmod 644 /home/claude/.claude/plugins/* 2>/dev/null || true
fi

# Setup claude user bashrc from system template
ln -sf /opt/mcp-cache/bashrc /home/claude/.bashrc

# Add npm global path configuration for claude user
echo "export NPM_CONFIG_PREFIX=/home/claude/.npm-global" >> /home/claude/.bashrc
echo "export PATH=/home/claude/.npm-global/bin:\$PATH" >> /home/claude/.bashrc

chown -R claude:claude /home/claude

# Add curl wrapper
cp /var/www/html/docker/bin/curl-wrapper /usr/local/bin/curl
chmod +x /usr/local/bin/curl

# Add npx wrapper (redirects "npx playwright" to "playwright")
# Note: Dev container doesn't have Playwright, but wrapper ensures compatibility
cp /var/www/html/docker/bin/npx-wrapper /usr/local/bin/npx
chmod +x /usr/local/bin/npx

# Switch to claude user and start shell
cd /var/www/html
exec su claude -c "cd /var/www/html && exec bash"
