#!/bin/bash

ROOT="/var/www/html"

# Setup localhost mapping with MULTIPLE FALLBACK METHODS

# # Function to validate IP address
# validate_ip() {
#     local ip=$1
#     if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
#         return 0
#     fi
#     return 1
# }
# 
# # Method 1: Try resolv.conf (most reliable in Docker)
# HOST_IP=$(cat /etc/resolv.conf 2>/dev/null | awk '/nameserver/ {print $2; exit}')
#
# # Validate Method 1
# if ! validate_ip "$HOST_IP"; then
#     echo "Warning: Method 1 (resolv.conf) failed or returned invalid IP: $HOST_IP"
#
#     # Method 2: Try host.docker.internal resolution
#     HOST_IP=$(getent hosts host.docker.internal 2>/dev/null | awk '{print $1}')
#
#     if ! validate_ip "$HOST_IP"; then
#         echo "Warning: Method 2 (host.docker.internal) failed or returned invalid IP: $HOST_IP"
#
#         # Method 3: Try ip route command as fallback
#         HOST_IP=$(ip route 2>/dev/null | grep default | awk '{print $3}' | head -n1)
#
#         if ! validate_ip "$HOST_IP"; then
#             echo "Warning: Method 3 (ip route) failed or returned invalid IP: $HOST_IP"
#
#             # Method 4: Try common Docker bridge IPs
#             for test_ip in "172.17.0.1" "192.168.65.2" "10.0.2.2"; do
#                 if ping -c 1 -W 1 $test_ip &>/dev/null; then
#                     HOST_IP=$test_ip
#                     echo "Warning: Using fallback Docker bridge IP: $HOST_IP"
#                     break
#                 fi
#             done
#         fi
#     fi
# fi
#
# # Final validation
# if ! validate_ip "$HOST_IP"; then
#     echo "ERROR: ALL HOST IP DETECTION METHODS FAILED!"
#     echo "Setting HOST_IP to 0.0.0.0 as last resort (binds to all interfaces)"
#     HOST_IP="0.0.0.0"
# fi
#
# echo "Successfully detected HOST_IP: $HOST_IP"
#
# cp /etc/hosts /etc/hosts.bak
# if [ -n "$HOST_IP" ]; then
#     # Backup original /etc/hosts
#
#
#     # Start with localhost mapping in first line
#     echo "$HOST_IP localhost" > /etc/hosts
#     # Check for DDEV configuration
#     if [ -f "/var/www/html/.ddev/config.yaml" ]; then
#
#         # Extract project name
#         PROJECT_NAME=$(grep "^name:" /var/www/html/.ddev/config.yaml | cut -d' ' -f2 | tr -d '"' | head -n1)
#
#         # Extract TLD (default is ddev.site if not specified)
#         PROJECT_TLD=$(grep "^project_tld:" /var/www/html/.ddev/config.yaml 2>/dev/null | cut -d' ' -f2 | tr -d '"' | head -n1)
#         if [ -z "$PROJECT_TLD" ]; then
#             PROJECT_TLD="ddev.site"
#         fi
#
#         # Primary domain with correct TLD
#         if [ -n "$PROJECT_NAME" ]; then
#             echo "$HOST_IP ${PROJECT_NAME}.${PROJECT_TLD}" >> /etc/hosts
#         fi
#
#         # Additional FQDNs
#         ADDITIONAL_FQDNS=$(grep "^additional_fqdns:" /var/www/html/.ddev/config.yaml 2>/dev/null | cut -d':' -f2- | tr -d '[]"' | tr ',' '\n')
#         if [ -n "$ADDITIONAL_FQDNS" ]; then
#             for domain in $ADDITIONAL_FQDNS; do
#                 domain=$(echo $domain | tr -d ' ')
#                 if [ -n "$domain" ]; then
#                     echo "$HOST_IP $domain" >> /etc/hosts
#                 fi
#             done
#         fi
#
#         # Additional hostnames (these also use the project_tld)
#         ADDITIONAL_HOSTNAMES=$(grep "^additional_hostnames:" /var/www/html/.ddev/config.yaml 2>/dev/null | cut -d':' -f2- | tr -d '[]"' | tr ',' '\n')
#         if [ -n "$ADDITIONAL_HOSTNAMES" ]; then
#             for hostname in $ADDITIONAL_HOSTNAMES; do
#                 hostname=$(echo $hostname | tr -d ' ')
#                 if [ -n "$hostname" ]; then
#                     # Additional hostnames get the TLD appended
#                     echo "$HOST_IP ${hostname}.${PROJECT_TLD}" >> /etc/hosts
#                 fi
#             done
#         fi
#     fi
#     cat /etc/hosts.bak >> /etc/hosts
#
#     # Check for .claude-domains file for custom domain mappings
#     if [ -f "/var/www/html/.claude-domains" ]; then
#         while IFS= read -r domain || [ -n "$domain" ]; do
#             # Skip empty lines and comments
#             if [ -n "$domain" ] && [[ ! "$domain" =~ ^# ]]; then
#                 domain=$(echo $domain | tr -d '\r' | tr -d ' ')
#                 echo "$HOST_IP $domain" >> /etc/hosts
#             fi
#         done < "/var/www/html/.claude-domains"
#     fi
#
# else
#     echo "ERROR: Could not determine Docker host IP!"
# fi

# Setup /home/claude directories (since it's volume-mounted)
mkdir -p /home/claude/.claude/plugins /home/claude/.claude/databases /home/claude/.claude/context
mkdir -p /home/claude/.npm-global/bin

# Copy pre-built environment facts database if it doesn't exist
if [ ! -f /home/claude/.claude/databases/main.db ] && [ -f /opt/mcp-cache/databases/environment.db ]; then
    cp /opt/mcp-cache/databases/environment.db /home/claude/.claude/databases/main.db
    echo "Environment facts database initialized from CLAUDE.md"
fi

chown -R claude:claude /home/claude

# Setup MCP configuration
if [ ! -f /home/claude/.claude.json ]; then
    cp /opt/mcp-cache/claude-template.json /home/claude/.claude.json

    # Update the currentProject path if needed
    sed -i "s|\"currentProject\": \"/var/www/html\"|\"currentProject\": \"$ROOT\"|g" /home/claude/.claude.json
    sed -i "s|\"/var/www/html\": {|\"$ROOT\": {|g" /home/claude/.claude.json

fi

# Initialize project settings if not exists
mkdir -p /var/www/html/.claude
if [ ! -f /var/www/html/.claude/settings.local.json ]; then
    # Use template for new projects
    if [ -f /opt/mcp-cache/claude-project-settings-template.json ]; then
        cp /opt/mcp-cache/claude-project-settings-template.json /var/www/html/.claude/settings.local.json
        echo "Claude Code settings initialized from template"
    fi
elif [ -f /home/claude/.claude.json ]; then
    # Update existing settings (preserve user changes)
    cp /home/claude/.claude.json /var/www/html/.claude/settings.local.json
    echo "Settings updated from /home/claude/.claude.json"
fi

# Ensure MCP config is available
if [ -f /opt/mcp-cache/mcp.json ]; then
    ln -sf /opt/mcp-cache/mcp.json /home/claude/.claude/plugins/mcp.json
fi

# Create symlinks to MCP assets from system location
if [ -d /opt/mcp-assets ]; then
    # Symlink MCP assets to /home/claude/mcp
    mkdir -p /home/claude/mcp
    ln -sfn /opt/mcp-assets/servers /home/claude/mcp/servers
    ln -sfn /opt/mcp-assets/context /home/claude/mcp/context
    ln -sfn /opt/mcp-cache/mcp.json /home/claude/mcp/config.json
    ln -sfn /opt/mcp-assets/init.sh /home/claude/mcp/init.sh

    # Also create context symlinks in .claude/context for compatibility
    mkdir -p /home/claude/.claude/context
    find /opt/mcp-assets/context -name "*.json" -type f | while read context_file; do
        filename=$(basename "$context_file")
        ln -sf "$context_file" "/home/claude/.claude/context/$filename"
    done

    # Ensure servers are executable
    chmod +x /opt/mcp-assets/servers/*.js 2>/dev/null || true
    chown -R claude:claude /home/claude/mcp
fi

# Ensure proper ownership and permissions
chown -R claude:claude /home/claude/.claude
chmod 755 /home/claude/.claude
chmod 644 /home/claude/.claude.json 2>/dev/null || true
if [ -d /home/claude/.claude/plugins ]; then
    chmod 755 /home/claude/.claude/plugins
    chmod 644 /home/claude/.claude/plugins/* 2>/dev/null || true
fi

# Setup claude user bashrc from system template
ln -sf /opt/mcp-cache/bashrc /home/claude/.bashrc

# Add npm global path configuration for claude user
echo "export NPM_CONFIG_PREFIX=/home/claude/.npm-global" >> /home/claude/.bashrc
echo "export PATH=/home/claude/.npm-global/bin:\$PATH" >> /home/claude/.bashrc

chown -R claude:claude /home/claude

# Add curl wrapper
cp /var/www/html/docker/bin/curl-wrapper /usr/local/bin/curl
chmod +x /usr/local/bin/curl

# Add npx wrapper (redirects "npx playwright" to "playwright")
# Note: Dev container doesn't have Playwright, but wrapper ensures compatibility
cp /var/www/html/docker/bin/npx-wrapper /usr/local/bin/npx
chmod +x /usr/local/bin/npx

# Switch to claude user and start shell
cd /var/www/html
exec su claude -c "cd /var/www/html && exec bash"
