FROM node:22-alpine

# Update npm to latest version
RUN npm install -g npm@latest

# Security updates and essential packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    bash \
    curl \
    wget \
    unzip \
    ca-certificates \
    jq \
    ripgrep \
    tree \
    htop \
    netcat-openbsd \
    nano \
    vim \
    make \
    openssh-client \
    iputils \
    sudo \
    sqlite \
    rsync \
    # Development languages and tools for Host-Simulation
    php83 php83-cli php83-phar php83-json php83-mbstring php83-openssl \
    php83-curl php83-dom php83-xml php83-tokenizer \
    python3 py3-pip \
    ruby ruby-dev \
    go \
    rust cargo \
    gcc g++ musl-dev \
    postgresql-client mysql-client \
    redis \
    docker-cli \
    # Image and PDF handling tools
    imagemagick \
    imagemagick-doc \
    imagemagick-dev \
    ghostscript \
    poppler-utils \
    ffmpeg \
    exiftool \
    graphicsmagick \
    libwebp-tools \
    jpegoptim \
    pngquant \
    optipng \
    && rm -rf /var/cache/apk/*

# Install Python package managers and Composer
RUN pip3 install --break-system-packages pipenv poetry && \
    # Install composer for PHP
    wget -O /usr/local/bin/composer https://getcomposer.org/composer-stable.phar && \
    chmod +x /usr/local/bin/composer

# Install Bun separately (requires different approach on Alpine)
RUN apk add --no-cache unzip && \
    curl -fsSL https://bun.sh/install | bash && \
    mv /root/.bun/bin/bun /usr/local/bin/ && \
    chmod +x /usr/local/bin/bun && \
    rm -rf /root/.bun

# Install MCP SDK and available servers
RUN npm install -g \
    @modelcontextprotocol/sdk \
    @modelcontextprotocol/server-filesystem \
    @modelcontextprotocol/server-memory

# Create non-root user
RUN addgroup -g 1010 claude && \
    adduser -D -s /bin/bash -u 1010 -G claude claude

# Add claude to sudoers
RUN echo "claude ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Ensure claude user can use development tools
RUN chmod 755 /usr/local/bin/composer && \
    # Create npm global directory for claude user
    mkdir -p /home/claude/.npm-global && \
    chown -R claude:claude /home/claude/.npm-global && \
    # Ensure rsync is executable
    chmod 755 /usr/bin/rsync 2>/dev/null || true && \
    # Set npm prefix for claude user to avoid permission issues
    echo "export NPM_CONFIG_PREFIX=/home/claude/.npm-global" >> /etc/profile && \
    echo "export PATH=/home/claude/.npm-global/bin:\$PATH" >> /etc/profile

# Note: /home/claude is volume-mounted, so we don't create anything there during build

# Copy MCP files to system location (owned by root)
COPY mcp/ /opt/mcp-assets/

# Create directories for MCP configuration
RUN mkdir -p /etc/claude /opt/mcp-cache && \
    chmod -R 755 /opt/mcp-assets && \
    chmod +x /opt/mcp-assets/servers/*.js

# Copy MCP cache files to system cache directory
RUN cp /opt/mcp-assets/cache/claude-config-template.json /opt/mcp-cache/claude-config-template.json && \
    cp /opt/mcp-assets/cache/bashrc.dev /opt/mcp-cache/bashrc && \
    cp /opt/mcp-assets/cache/bashrc.root /root/.bashrc && \
    chmod 644 /opt/mcp-cache/*

# Pre-cache and configure MCP servers during build
RUN cp /opt/mcp-assets/config.json /opt/mcp-cache/mcp.json && \
    cp /opt/mcp-assets/config.json /etc/claude/mcp.json && \
    chmod 644 /etc/claude/mcp.json && \
    # Initialize environment facts database with CLAUDE.md information
    mkdir -p /opt/mcp-cache/databases && \
    sqlite3 /opt/mcp-cache/databases/environment.db < /opt/mcp-assets/cache/init-environment-db.sql && \
    chmod 644 /opt/mcp-cache/databases/environment.db && \
    # Create a pre-configured .claude.json template in system location
    echo '{' > /opt/mcp-cache/claude-template.json && \
    echo '  "currentProject": "/var/www/html",' >> /opt/mcp-cache/claude-template.json && \
    echo '  "projects": {' >> /opt/mcp-cache/claude-template.json && \
    echo '    "/var/www/html": {' >> /opt/mcp-cache/claude-template.json && \
    echo '      "allowedTools": [],' >> /opt/mcp-cache/claude-template.json && \
    echo '      "mcpContextUris": [],' >> /opt/mcp-cache/claude-template.json && \
    cat /opt/mcp-cache/claude-config-template.json | jq -c . | sed 's/^{/      /' | sed 's/}$//' >> /opt/mcp-cache/claude-template.json && \
    echo '    }' >> /opt/mcp-cache/claude-template.json && \
    echo '  }' >> /opt/mcp-cache/claude-template.json && \
    echo '}' >> /opt/mcp-cache/claude-template.json && \
    # Pre-initialize MCP server modules to cache dependencies
    node -e "try { require('@modelcontextprotocol/sdk'); } catch(e) {}" && \
    node -e "try { require('@modelcontextprotocol/server-filesystem'); } catch(e) {}" && \
    node -e "try { require('@modelcontextprotocol/server-memory'); } catch(e) {}" && \
    # Ensure proper permissions for cache
    chmod 755 /opt/mcp-cache && \
    chmod 644 /opt/mcp-cache/*

# Copy entrypoint scripts
COPY docker/bin/entrypoint.dev /docker/entrypoint.sh
COPY docker/bin/curl-wrapper /usr/local/bin/curl-wrapper
COPY docker/bin/curl-wrapper-install /usr/local/bin/curl-wrapper-install

RUN chmod +x /docker/entrypoint.sh && \
    chmod +x /usr/local/bin/curl-wrapper && \
    chmod +x /usr/local/bin/curl-wrapper-install && \
    cp /opt/mcp-assets/init.sh /usr/local/bin/mcp-init && \
    chmod +x /usr/local/bin/mcp-init

# MCP servers are pre-cached during build
# Note: /home/claude/.claude setup happens in entrypoint since /home/claude is mounted

# Install global npm packages to system location (yarn already exists in node image)
RUN npm install -g \
        @anthropic-ai/claude-code \
        pnpm && \
    # Set PATH for all users
    echo 'export PATH="/usr/local/bin:$PATH"' >> /etc/profile && \
    echo 'export PATH="/usr/local/bin:$PATH"' >> /etc/bash.bashrc

# Install Python MCP servers (MUST succeed)
RUN pip3 install --break-system-packages \
    mcp \
    mcp-server-git \
    mcp-server-sqlite && \
    # Verify Python MCP servers are accessible
    which mcp-server-git && which mcp-server-sqlite

# Settings will be created dynamically by entrypoint
# No static config files needed

# Set environment variables
ENV NPM_CONFIG_CACHE=/tmp/npm-cache \
    NPM_CONFIG_PREFIX=/home/claude/.npm-global \
    NODE_ENV=development \
    DOCKER_ENV=true \
    PATH="/home/claude/.npm-global/bin:/usr/local/bin:$PATH" \
    COMPOSER_HOME=/home/claude/.composer \
    COMPOSER_ALLOW_SUPERUSER=1

# Set working directory
WORKDIR /var/www/html

# Simple bash as default (installer will override with custom entrypoint)
CMD ["/bin/bash"]
