FROM node:22-alpine

# Security updates and essential packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    bash \
    curl \
    wget \
    unzip \
    ca-certificates \
    jq \
    ripgrep \
    tree \
    htop \
    netcat-openbsd \
    nano \
    vim \
    make \
    openssh-client \
    iputils \
    sudo \
    # Development languages and tools for Host-Simulation
    php83 php83-cli php83-phar php83-json php83-mbstring php83-openssl \
    php83-curl php83-dom php83-xml php83-tokenizer \
    python3 py3-pip \
    ruby ruby-dev \
    go \
    rust cargo \
    gcc g++ musl-dev \
    postgresql-client mysql-client \
    redis \
    docker-cli \
    && rm -rf /var/cache/apk/*

# Install additional package managers and create fake commands
RUN npm install -g pnpm yarn bun && \
    pip3 install --break-system-packages pipenv poetry && \
    # Create fake commands that Claude expects on a normal host
    echo '#!/bin/sh\necho "brew: simulated for container environment"' > /usr/local/bin/brew && \
    echo '#!/bin/sh\necho "systemctl: simulated for container environment"' > /usr/local/bin/systemctl && \
    echo '#!/bin/sh\necho "apt: simulated for container environment"' > /usr/local/bin/apt && \
    echo '#!/bin/sh\necho "apt-get: simulated for container environment"' > /usr/local/bin/apt-get && \
    chmod +x /usr/local/bin/brew /usr/local/bin/systemctl /usr/local/bin/apt /usr/local/bin/apt-get && \
    # Create composer for PHP
    wget -O /usr/local/bin/composer https://getcomposer.org/composer-stable.phar && \
    chmod +x /usr/local/bin/composer

# Create non-root user
RUN addgroup -g 1010 claude && \
    adduser -D -s /bin/bash -u 1010 -G claude claude

# Add claude to sudoers
RUN echo "claude ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Create directories
RUN mkdir -p /home/claude/.config && \
    mkdir -p /home/claude/.claude && \
    chown -R claude:claude /home/claude

# Install Claude Code globally
RUN npm install -g @anthropic-ai/claude-code

# Settings will be created dynamically by entrypoint
# No static config files needed

# Set environment variables
ENV NPM_CONFIG_CACHE=/tmp/npm-cache \
    NODE_ENV=development \
    DOCKER_ENV=true

# Set working directory
WORKDIR /var/www/html

# Simple bash as default (installer will override with custom entrypoint)
CMD ["/bin/bash"]