FROM node:22-alpine

# Update npm to latest version
RUN npm install -g npm@latest

# Security updates and essential packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    bash \
    curl \
    wget \
    unzip \
    ca-certificates \
    jq \
    ripgrep \
    tree \
    htop \
    netcat-openbsd \
    nano \
    vim \
    make \
    openssh-client \
    iputils \
    sudo \
    # Development languages and tools for Host-Simulation
    php83 php83-cli php83-phar php83-json php83-mbstring php83-openssl \
    php83-curl php83-dom php83-xml php83-tokenizer \
    python3 py3-pip \
    ruby ruby-dev \
    go \
    rust cargo \
    gcc g++ musl-dev \
    postgresql-client mysql-client \
    redis \
    docker-cli \
    # Image and PDF handling tools
    imagemagick \
    imagemagick-doc \
    imagemagick-dev \
    ghostscript \
    poppler-utils \
    ffmpeg \
    exiftool \
    graphicsmagick \
    libwebp-tools \
    jpegoptim \
    pngquant \
    optipng \
    && rm -rf /var/cache/apk/*

# Install Python package managers and Composer
RUN pip3 install --break-system-packages pipenv poetry && \
    # Install composer for PHP
    wget -O /usr/local/bin/composer https://getcomposer.org/composer-stable.phar && \
    chmod +x /usr/local/bin/composer

# Install Bun separately (requires different approach on Alpine)
RUN apk add --no-cache unzip && \
    curl -fsSL https://bun.sh/install | bash && \
    mv /root/.bun/bin/bun /usr/local/bin/ && \
    chmod +x /usr/local/bin/bun && \
    rm -rf /root/.bun

# Install MCP SDK and available servers
RUN npm install -g \
    @modelcontextprotocol/sdk \
    @modelcontextprotocol/server-filesystem

# Create non-root user
RUN addgroup -g 1010 claude && \
    adduser -D -s /bin/bash -u 1010 -G claude claude

# Add claude to sudoers
RUN echo "claude ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Create directories including npm-global for user
RUN mkdir -p /home/claude/.config && \
    mkdir -p /home/claude/.claude && \
    mkdir -p /home/claude/.npm-global && \
    chown -R claude:claude /home/claude

# Copy context files to claude user directory
COPY claude/ /home/claude/.claude/

# Copy MCP default configuration for Claude Code
COPY docker/mcp.json /etc/claude/mcp.json

# Copy entrypoint script
COPY docker/entrypoint.dev.sh /docker/entrypoint.sh
RUN chmod +x /docker/entrypoint.sh

# Fix ownership of copied files
RUN chown -R claude:claude /home/claude/.claude

# Setup npm global directory for claude user with proper permissions
RUN mkdir -p /home/claude/.npm-global && \
    chown -R claude:claude /home/claude/.npm-global && \
    # Set npm config for claude user
    su claude -c "npm config set prefix /home/claude/.npm-global" && \
    # Install packages as claude user with proper environment
    su claude -c "cd /home/claude && \
        export NPM_CONFIG_PREFIX=/home/claude/.npm-global && \
        export PATH=/home/claude/.npm-global/bin:/usr/local/bin:$PATH && \
        npm install -g --force \
            @anthropic-ai/claude-code \
            pnpm \
            yarn" && \
    # Create symlinks in /usr/local/bin for system-wide access
    ln -sf /home/claude/.npm-global/bin/claude /usr/local/bin/claude && \
    ln -sf /home/claude/.npm-global/bin/pnpm /usr/local/bin/pnpm && \
    ln -sf /home/claude/.npm-global/bin/yarn /usr/local/bin/yarn && \
    # Verify installation
    ls -la /home/claude/.npm-global/bin/ && \
    # Set PATH for all users (both npm global locations)
    echo 'export PATH="/home/claude/.npm-global/bin:/usr/local/bin:$PATH"' >> /etc/profile && \
    echo 'export PATH="/home/claude/.npm-global/bin:/usr/local/bin:$PATH"' >> /etc/bash.bashrc

# Install Python MCP servers (MUST succeed)
RUN pip3 install --break-system-packages \
    mcp-server-git

# Settings will be created dynamically by entrypoint
# No static config files needed

# Set environment variables
ENV NPM_CONFIG_CACHE=/tmp/npm-cache \
    NODE_ENV=development \
    DOCKER_ENV=true \
    NPM_CONFIG_PREFIX="/home/claude/.npm-global" \
    PATH="/home/claude/.npm-global/bin:/usr/local/bin:$PATH"

# Set working directory
WORKDIR /var/www/html

# Simple bash as default (installer will override with custom entrypoint)
CMD ["/bin/bash"]
